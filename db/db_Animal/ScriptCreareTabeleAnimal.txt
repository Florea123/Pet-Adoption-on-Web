DROP TABLE Relations CASCADE CONSTRAINTS;
DROP TABLE FeedingSchedule CASCADE CONSTRAINTS;
DROP TABLE MedicalHistory CASCADE CONSTRAINTS;
DROP TABLE Animal CASCADE CONSTRAINTS;

DROP SEQUENCE seq_animal;
DROP SEQUENCE seq_medical;
DROP SEQUENCE seq_feeding;
DROP SEQUENCE seq_relations;

CREATE OR REPLACE TYPE feeding_time_array AS VARRAY(10) OF VARCHAR2(50);
/

CREATE TABLE Animal (
    animalID NUMBER PRIMARY KEY,
    userID NUMBER,
    name VARCHAR2(100),
    breed VARCHAR2(100),
    species VARCHAR2(100),
    age NUMBER,
    views NUMBER DEFAULT 0,
    gender VARCHAR2(10) CHECK (gender IN ('male', 'female')),
    createdAt DATE DEFAULT SYSDATE
);

CREATE TABLE MedicalHistory (
    id NUMBER PRIMARY KEY,
    animalID NUMBER,
    vetNumber VARCHAR2(50),
    recordDate DATE,
    description VARCHAR2(4000),
    first_aid_noted VARCHAR2(4000),
    CONSTRAINT fk_medical_animal FOREIGN KEY (animalID) REFERENCES Animal(animalID)
);

CREATE TABLE FeedingSchedule (
    id NUMBER PRIMARY KEY,
    animalID NUMBER UNIQUE,
    feeding_time feeding_time_array,
    food_type VARCHAR2(100),
    notes VARCHAR2(4000),
    CONSTRAINT fk_feeding_animal FOREIGN KEY (animalID) REFERENCES Animal(animalID)
);

CREATE TABLE Relations (
    id NUMBER PRIMARY KEY,
    animalID NUMBER UNIQUE,
    friendWith VARCHAR2(4000),
    CONSTRAINT fk_relation_animal FOREIGN KEY (animalID) REFERENCES Animal(animalID)
);

CREATE SEQUENCE seq_animal START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_medical START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_feeding START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_relations START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_animal
BEFORE INSERT ON Animal
FOR EACH ROW
BEGIN
    :NEW.animalID := seq_animal.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_medical
BEFORE INSERT ON MedicalHistory
FOR EACH ROW
BEGIN
    :NEW.id := seq_medical.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_feeding
BEFORE INSERT ON FeedingSchedule
FOR EACH ROW
BEGIN
    :NEW.id := seq_feeding.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_relations
BEFORE INSERT ON Relations
FOR EACH ROW
BEGIN
    :NEW.id := seq_relations.NEXTVAL;
END;
/